def max_prof(price, n):
    dp = [0] * (n + 1)
    rod_used = [[] for _ in range(n + 1)]  # To store the rods used for each length

    for i in range(1, n + 1):
        max_val = float('-inf')
        for j in range(i):
            if price[j] + dp[i - j - 1] > max_val:
                max_val = price[j] + dp[i - j - 1]
                rod_used[i] = rod_used[i - j - 1] + [j + 1]  # Store the used rod lengths
        dp[i] = max_val

    return dp[n], rod_used[n]

rod_len = int(input("Enter the length of the rod: "))

price = []
for i in range(rod_len):
    pl = int(input(f"Enter the price for length {i + 1}: "))
    price.append(pl)

try:
    if rod_len < 0:
        raise ValueError("Invalid! Rod length should be a positive integer.")

    max_value, used_rods = max_prof(price, rod_len)
    print("Maximum Obtainable Value:", max_value)
    print("Rods Used:", used_rods)

except ValueError as e:
    print("Error:", e)
