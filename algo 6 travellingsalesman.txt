PRACTICAL NO:6

Aim: Demonstrate a solution for Traveling Salesman Problem using Dynamic Programming
code :-
def dfs(graph, current, visited, path, distance):
    n = len(graph)
    if len(visited) == n:
        path.append(path[0])
        distance += graph[current][path[0]]
        return distance, path
    
    min_distance = float('inf')
    best_path = None
    
    for next_node in range(n):
        if next_node not in visited and current != next_node:
            visited.add(next_node)
            path.append(next_node)
            new_distance = distance + graph[current][next_node]
            new_distance, new_path = dfs(graph, next_node, visited, path, new_distance)
            visited.remove(next_node)
            path.pop() 
            
            if new_distance < min_distance:
                min_distance = new_distance
                best_path = new_path
    
    return min_distance, best_path

def read_graph_from_input():
    n = int(input("Enter the number of nodes: "))
    graph = []
    for i in range(n):
        row = []
        for j in range(n):
            weight = int(input(f"Enter the weight from node {i} to node {j}: "))
            row.append(weight)
        graph.append(row)
    return graph

def main():
    graph = read_graph_from_input()
    min_tour_len, tour_path = dfs(graph, 0, set([0]), [0], 0)
    print("Minimum Travel Length:", min_tour_len)
    print("Travel Path:", tour_path)

if __name__ == "__main__":
    main()
